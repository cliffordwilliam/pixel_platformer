import pygame as pg
from sys import exit
from os import path
from json import dump, load

pg.init()

# Constants

# Tiles are squares
TILE_SIZE = 18

# Room minimum size
ROOM_WIDTH_TILE_UNIT = 24
ROOM_HEIGHT_tile_unit = 16
ROOM_WIDTH = ROOM_WIDTH_TILE_UNIT * TILE_SIZE
ROOM_HEIGHT = ROOM_HEIGHT_tile_unit * TILE_SIZE

# Font
FONT_PATH = path.join('fonts', 'cg-pixel-3x5.ttf')
FONT_HEIGHT = 5
FONT = pg.font.Font(
    FONT_PATH,
    FONT_HEIGHT
)

# Paths
GRID_PNG_PATH = path.join('images', 'grid.png')
SPRITE_SHEET_PNG_PATH = path.join('images', 'sprite_sheet.png')
SPRITE_SHEET_JSON_PATH = path.join('data', 'sprite_sheet.json')
ROOMS_DIR_PATH = path.join('rooms')

ROOM_1_PATH = path.join(ROOMS_DIR_PATH, 'room1.json')

# Native position and dimensions data
NATIVE_RECT = pg.Rect(
    0,
    0,
    ROOM_WIDTH_TILE_UNIT * TILE_SIZE,
    ROOM_HEIGHT_tile_unit * TILE_SIZE
)

# Blit everything here
NATIVE_SURFACE = pg.Surface(
    (
        NATIVE_RECT.width,
        NATIVE_RECT.height
    )
)

# Dt generator and loop speed limiter
CLOCK = pg.time.Clock()

# Game max fps
FPS = 60


class Game():
    # Stores non constant game data that you can change, it has automatic setters and getters.

    def __init__(self):
        # There can only be 1 scene at a time
        self.scene = None

        # Debug flag
        self.is_debug = False

        # Resolution scale
        self.resolution_scale = 3

        # Blit NATIVE_SURFACE here
        self.window_surface = pg.display.set_mode(
            (
                NATIVE_RECT.width * self.resolution_scale,
                NATIVE_RECT.height * self.resolution_scale
            )
        )

    # SET self.resolution_scale:
        # window_surface
    @property
    def resolution_scale(self):
        return self._resoltion_scale

    @resolution_scale.setter
    def resolution_scale(self, value):
        # Resolution scale
        self._resoltion_scale = value

        self.window_surface = pg.display.set_mode(
            (
                NATIVE_RECT.width * self.resolution_scale,
                NATIVE_RECT.height * self.resolution_scale
            )
        )


game = Game()


class Sprite(pg.sprite.Sprite):
    # Needs a sprite sheet, has regions list to indicate the regions in the sprite sheet that it owns

    def __init__(self, groups, sprite_sheet_surface, position, frames_list, name):
        super().__init__(groups)
        # Sprite sheet
        self.image = sprite_sheet_surface
        self.rect = self.image.get_frect()

        # Sprite sheet with alpha
        self.image_translucent = self.image.copy()
        self.image_translucent.set_alpha(128)

        # Frames list
        self.frames_list = frames_list
        self.frames_list_len = len(self.frames_list)
        self.frames_list_len_minus_one = self.frames_list_len - 1

        # Frame index
        self.frame_index = 0

        # Frame
        self.frame = self.frames_list[self.frame_index]
        self.frame_frect = pg.FRect(
            self.rect.x,
            self.rect.y,
            self.frame[2],
            self.frame[3]
        )

        # Sprite position: move position -> move rect -> move frame_frect
        self.position = pg.math.Vector2(position)
        # TODO: For in game, add children with offset and origin offset - So you can attach things together and move actor origin to feet

        # Name
        self.name = name

    # SET self.position:
        # self.rect.x
        # self.rect.y
        # self.frame_frect.x
        # self.frame_frect.y
    @property
    def position(self):
        return self._position

    @position.setter
    def position(self, value):
        self._position = value
        self.rect.x = self.position.x
        self.rect.y = self.position.y
        self.frame_frect.x = self.position.x
        self.frame_frect.y = self.position.y

    # SET frame_index:
        # self.frame
    @property
    def frame_index(self):
        return self._frame_index

    @frame_index.setter
    def frame_index(self, value):
        if 0 <= value < self.frames_list_len:
            self._frame_index = value
            self.frame = self.frames_list[self.frame_index]


class Group(pg.sprite.Group):
    # Acts like a layer, draws each sprite with camera offset

    def __init__(self):
        super().__init__()

    def draw(self, camera_frect):
        # Draw each sprite in this group
        for sprite in self:
            # Get camera offset position
            sprite_rect_render_position = (
                sprite.rect.x - camera_frect.x,
                sprite.rect.y - camera_frect.y
            )

            # Render with camera offset position
            NATIVE_SURFACE.blit(
                sprite.image,
                sprite_rect_render_position,
                sprite.frame,
            )

            # Debug draw
            if game.is_debug:
                # Render frame in real position
                NATIVE_SURFACE.blit(
                    sprite.image,
                    (sprite.rect.x, sprite.rect.y),
                    sprite.frame,
                )

                # Render sprite sheet rect in real position
                pg.draw.rect(
                    NATIVE_SURFACE,
                    "red",
                    sprite.rect,
                    1
                )

                # Render frame rect in real position
                pg.draw.rect(
                    NATIVE_SURFACE,
                    "green",
                    sprite.frame_frect,
                    1
                )

                # Draw frame rect with camera offset
                pg.draw.rect(
                    NATIVE_SURFACE,
                    "red",
                    pg.FRect(
                        sprite_rect_render_position[0],
                        sprite_rect_render_position[1],
                        sprite.frame_frect.width,
                        sprite.frame_frect.height
                    ),
                    1
                )


class Room1Scene():
    def __init__(self):
        # Load room for this scene
        with open(ROOM_1_PATH, 'r') as file:
            json_room_data = load(file)
            print(json_room_data["sprite_sheet_path"])

        # Things are drawn relative to this
        self.camera_frect = pg.FRect(
            0,
            0,
            NATIVE_RECT.width,
            NATIVE_RECT.height
        )
        self.camera_velocity = pg.math.Vector2()
        self.camera_max_speed = 180.0
        self.camera_lerp_weight = 0.12

        # Key inputs
        self.is_right_pressed = 0
        self.is_left_pressed = 0
        self.is_up_pressed = 0
        self.is_down_pressed = 0

        # Sprite sheet surface
        self.sprite_sheet_surface = pg.image.load(
            json_room_data["sprite_sheet_path"]
        ).convert_alpha()

        # Grid
        self.grid_surface = pg.image.load(
            GRID_PNG_PATH
        ).convert_alpha()
        self.grid_rect = self.grid_surface.get_frect()

        # To iterate over the sprites
        self.sprite_names_list = []

        # Pre process json
        with open(SPRITE_SHEET_JSON_PATH, 'r') as file:
            json_data = load(file)
        for sprite_name, sprite_data in json_data.items():
            # Fill sprite names list
            self.sprite_names_list.append(sprite_name)
            frames_list = []
            # Frames_list: dict -> tuple
            for frame in sprite_data["frames_list"]:
                tuple_frame = (
                    frame["x"], frame["y"], frame["w"], frame["h"]
                )
                frames_list.append((tuple_frame))
            sprite_data["frames_list"] = frames_list
            # Bitmasks key: str -> int
            sprite_data["bitmasks"] = {
                int(key): value for key, value in sprite_data["bitmasks"].items()}

        # self.sprite_sheet_dict ready
        self.sprite_sheet_dict = json_data

        # Room settings
        self.room_topleft_room_unit = (
            json_room_data["room_topleft_room_unit_x"],
            json_room_data["room_topleft_room_unit_y"],
        )
        self.room_scale = (
            json_room_data["room_scale_x"],
            json_room_data["room_scale_y"],
        )

        # Room size: To make the list
        self.room_width_tile_unit = json_room_data["room_width_tile_unit"]
        self.room_height_tile_unit = json_room_data["room_height_tile_unit"]

        # To get / set tile from list
        self.room_topleft_tile_unit = (
            self.room_topleft_room_unit[0] * ROOM_WIDTH_TILE_UNIT,
            self.room_topleft_room_unit[1] * ROOM_HEIGHT_tile_unit
        )

        # For drawing limit and bringing camera to rect
        self.room_topleft = (
            self.room_topleft_room_unit[0] * ROOM_WIDTH,
            self.room_topleft_room_unit[1] * ROOM_HEIGHT
        )
        self.room_width = json_room_data["room_width"]
        self.room_height = json_room_data["room_height"]

        # Bring camera to room top left
        self.camera_frect.topleft = self.room_topleft

        # Build the room list
        room = []
        total = self.room_width_tile_unit * self.room_height_tile_unit
        for _ in range(total):
            room.append(0)

        self.rooms_list = [
            room.copy(),
            room.copy(),
            room.copy(),
        ]

        # Groups
        self.groups_list = [
            Group(),
            Group(),
            Group(),
        ]

        # Build the room, instance sprites
        for i, room in enumerate(json_room_data["rooms_list"]):
            # Saved cells are always sprites
            for cell in room:
                # Instance and init each sprite
                sprite = Sprite(
                    self.groups_list[i],
                    self.sprite_sheet_surface,
                    (cell["position_x"], cell["position_y"]),
                    self.sprite_sheet_dict[cell["name"]]["frames_list"],
                    cell["name"]
                )
                sprite.frame_index = cell["frame_index"]

                # Preprocess its position to be saved to room lists
                sprite_snapped_in_game_tile_unit = (
                    int(cell["position_x"] // TILE_SIZE),
                    int(cell["position_y"] // TILE_SIZE)
                )

                # Save this sprite to room map
                self.set_tile_from_room(
                    sprite_snapped_in_game_tile_unit[0],
                    sprite_snapped_in_game_tile_unit[1],
                    sprite,
                    self.rooms_list[i]
                )

    # Coordinate -> Object
    def get_tile_from_room(self, x_tile_unit, y_tile_unit, room):
        # Bring room back to origin - array top left is always 0 0
        x_tile_unit -= self.room_topleft_tile_unit[0]
        y_tile_unit -= self.room_topleft_tile_unit[1]
        if (0 <= x_tile_unit < self.room_width_tile_unit) and (0 <= y_tile_unit < self.room_height_tile_unit):
            return room[y_tile_unit * self.room_width_tile_unit + x_tile_unit]
        return -1

    # Set object with coordinate
    def set_tile_from_room(self, x_tile_unit, y_tile_unit, value, room):
        # Bring room back to origin - array top left is always 0 0
        x_tile_unit -= self.room_topleft_tile_unit[0]
        y_tile_unit -= self.room_topleft_tile_unit[1]
        if (0 <= x_tile_unit < self.room_width_tile_unit) and (0 <= y_tile_unit < self.room_height_tile_unit):
            room[y_tile_unit *
                 self.room_width_tile_unit + x_tile_unit] = value

    def input(self, event):
        # Key up
        if event.type == pg.KEYDOWN:
            # P
            if event.key == pg.K_p:
                game.is_debug = not game.is_debug

            # Right
            if event.key == pg.K_d:
                self.is_right_pressed = 1
            # Left
            if event.key == pg.K_a:
                self.is_left_pressed = 1
            # Up
            if event.key == pg.K_w:
                self.is_up_pressed = 1
            # Down
            if event.key == pg.K_s:
                self.is_down_pressed = 1

            # 1
            if event.key == pg.K_1:
                game.resolution_scale = 1
            # 2
            if event.key == pg.K_2:
                game.resolution_scale = 2
            # 3
            if event.key == pg.K_3:
                game.resolution_scale = 3
            # 4
            if event.key == pg.K_4:
                game.resolution_scale = 4

        # Key up
        elif event.type == pg.KEYUP:
            # Right
            if event.key == pg.K_d:
                self.is_right_pressed = 0
            # Left
            if event.key == pg.K_a:
                self.is_left_pressed = 0
            # Up
            if event.key == pg.K_w:
                self.is_up_pressed = 0
            # Down
            if event.key == pg.K_s:
                self.is_down_pressed = 0

        # Mouse
        if event.type == pg.MOUSEBUTTONDOWN:
            # Lmb
            if event.button == 1:
                pos = pg.mouse.get_pos()

                # Calculate mouse position in global coordinates (for UI clicks)
                mouse_global = (
                    pos[0] // game.resolution_scale,
                    pos[1] // game.resolution_scale
                )

                # Calculate mouse position snapped to game grid (for tile placement clicks)
                mouse_snapped_in_game = (
                    (
                        mouse_global[0] + self.camera_frect.x
                    ) // TILE_SIZE * TILE_SIZE,
                    (
                        mouse_global[1] + self.camera_frect.y
                    ) // TILE_SIZE * TILE_SIZE
                )

                # Calculate mouse position snapped to game grid in tile units (for collision checks)
                mouse_snapped_in_game_tile_unit = (
                    int(mouse_snapped_in_game[0] // TILE_SIZE),
                    int(mouse_snapped_in_game[1] // TILE_SIZE)
                )

                # Mouse position -> index -> get tile in room_map
                clicked_cell_item = self.get_tile_from_room(
                    mouse_snapped_in_game_tile_unit[0],
                    mouse_snapped_in_game_tile_unit[1],
                    self.rooms_list[0]
                )

                print(clicked_cell_item)

    def update(self, dt):
        # Key input
        direction = pg.math.Vector2(
            self.is_right_pressed - self.is_left_pressed,
            self.is_down_pressed - self.is_up_pressed
        )
        if direction.length() > 0:
            direction = direction.normalize()

        # Camera velocity towards target velocity by weight
        self.camera_velocity = self.camera_velocity.lerp(
            direction * self.camera_max_speed, self.camera_lerp_weight)

        # Prevent bouncing
        if self.camera_velocity.length() < 1.0:
            self.camera_velocity *= 0

        # Velocity updates position
        self.camera_frect.topleft += self.camera_velocity * dt

        # Clear
        NATIVE_SURFACE.fill("black")

        # Grid
        grid_render_position = (
            (
                (self.grid_rect.x - self.camera_frect.x) % TILE_SIZE
            ) - TILE_SIZE,
            (
                (self.grid_rect.y - self.camera_frect.y) % TILE_SIZE
            ) - TILE_SIZE
        )
        NATIVE_SURFACE.blit(
            self.grid_surface,
            grid_render_position
        )

        # Line
        line_x = (-self.camera_frect.x) % (NATIVE_RECT.width)
        pg.draw.line(
            NATIVE_SURFACE,
            "grey6",
            (line_x, 0),
            (line_x, NATIVE_RECT.height),
            4
        )
        line_y = (-self.camera_frect.y) % (NATIVE_RECT.height)
        pg.draw.line(
            NATIVE_SURFACE,
            "grey6",
            (0, line_y),
            (NATIVE_RECT.width, line_y),
            4
        )

        # Room rect draw
        pg.draw.rect(
            NATIVE_SURFACE,
            "red",
            pg.FRect(
                self.room_topleft[0] - self.camera_frect.x,
                self.room_topleft[1] - self.camera_frect.y,
                self.room_width,
                self.room_height,
            ),
            1
        )

        # Origin
        pg.draw.circle(
            NATIVE_SURFACE,
            "red",
            (
                -self.camera_frect.x + 1,
                -self.camera_frect.y + 1
            ),
            2
        )

        # Groups draw
        for group in self.groups_list:
            group.draw(self.camera_frect)


# Set scene
game.scene = Room1Scene()


while 1:
    # Limit fps and get dt
    dt = CLOCK.tick(FPS) / 1000

    # Get events
    for event in pg.event.get():
        # Close window
        if event.type == pg.QUIT:
            pg.quit()
            exit()

        # Scene event
        game.scene.input(event)

    # Scene update
    game.scene.update(dt)

    # Resize native to window
    pg.transform.scale_by(
        NATIVE_SURFACE, game.resolution_scale, game.window_surface
    )

    # Update window
    pg.display.update()
