
    def draw_origin(self, native_surface):
        origin_position = (0, 0)

        # Position -> render position
        origin_render_position = position_sub_camera(
            origin_position, self.camera_rect)

        # Draw
        pygame.draw.circle(
            native_surface,
            "red",
            origin_render_position,
            3,
            1
        )

    def draw_grid(self, native_surface):
        # To be used for offseting lines for loop
        camera_position_snapped = snap_position_to_grid(
            (self.camera_rect.left, self.camera_rect.top), TILE_SIZE
        )

        # Handle each vertical lines
        for vertical_line_index in range(NATIVE_WIDTH_TILES + 1):
            # Line index to position
            vertical_line_position_x = vertical_line_index * TILE_SIZE

            # Position -> render position
            vertical_line_render_position_x = position_sub_camera(
                (vertical_line_position_x, 0), self.camera_rect
            )[0]

            # Keep grid in view
            vertical_line_render_position_x += camera_position_snapped[0]

            # Draw
            pygame.draw.line(
                native_surface,
                "grey5",
                (vertical_line_render_position_x, 0),
                (vertical_line_render_position_x, NATIVE_HEIGHT)
            )

            vertical_ruler_number = int(
                vertical_line_index + camera_position_snapped[0] // TILE_SIZE
            )

            # Get vertical_line_index surface
            vertical_line_index_surface = self.cg_pixel_3x5_font.render(
                str(vertical_ruler_number),
                False,
                "white"
            )

            # Get vertical_line_index rect
            vertical_line_index_rect = vertical_line_index_surface.get_frect()

            # Position column number rect
            vertical_line_index_rect.left = vertical_line_render_position_x
            # vertical_line_index_rect.top += 1

            # Render column number surface on column number rect
            native_surface.blit(
                vertical_line_index_surface,
                vertical_line_index_rect
            )

        # Handle each vertical lines
        for horizontal_line_index in range(NATIVE_HEIGHT_TILES + 1):
            # Line index to position
            horizontal_line_position_y = horizontal_line_index * TILE_SIZE

            # Position -> render position
            horizontal_line_render_position_y = position_sub_camera(
                (0, horizontal_line_position_y), self.camera_rect
            )[1]

            # Keep grid in view
            horizontal_line_render_position_y += camera_position_snapped[1]

            # Draw
            pygame.draw.line(
                native_surface,
                "grey5",
                (0, horizontal_line_render_position_y),
                (NATIVE_WIDTH, horizontal_line_render_position_y)
            )

            horizontal_ruler_number = int(
                horizontal_line_index + camera_position_snapped[1] // TILE_SIZE
            )

            # Get horizontal_line_index surface
            horizontal_line_index_surface = self.cg_pixel_3x5_font.render(
                str(horizontal_ruler_number),
                False,
                "white"
            )

            # Get horizontal_line_index rect
            horizontal_line_index_rect = horizontal_line_index_surface.get_frect()

            # Position column number rect
            horizontal_line_index_rect.top = horizontal_line_render_position_y
            # horizontal_line_index_rect.left += 1

            # Render column number surface on column number rect
            native_surface.blit(
                horizontal_line_index_surface,
                horizontal_line_index_rect
            )

    def render_add_layer_button(self, native_surface):
        # Position the layer text on the layer rect
        self.add_layer_text_rect.center = self.add_layer_button_rect.center

        # Draw add layer button rect
        pygame.draw.rect(
            native_surface,
            "white",
            self.add_layer_button_rect,
        )

        # Render the text
        native_surface.blit(
            self.add_layer_button_text_surface,
            self.add_layer_text_rect
        )

    def render_del_layer_button(self, native_surface):
        # Position the layer text on the layer rect
        self.del_layer_text_rect.center = self.del_layer_button_rect.center

        # Draw del layer button rect
        pygame.draw.rect(
            native_surface,
            "white",
            self.del_layer_button_rect,
        )

        # Render the text
        native_surface.blit(
            self.del_layer_button_text_surface,
            self.del_layer_text_rect
        )

    def render_layer_button(self, native_surface):
        for layer_button_index, layer_button_item in enumerate(self.layer_buttons_rect_text_surface_list):
            # Is active?
            is_active = self.current_layer_index == layer_button_index

            # Get rect
            layer_button_rect = layer_button_item["rect"]

            # Position layer button rect
            layer_button_rect.top = layer_button_index * TILE_SIZE

            # Draw layer button rect
            pygame.draw.rect(
                native_surface,
                "chartreuse4" if is_active else "grey60",
                layer_button_rect,
            )

            # Get text
            layer_button_text_surface = layer_button_item["text_surface"]
            layer_button_text_rect = layer_button_item["text_rect"]

            # Position the layer button text on the layer button rect
            layer_button_text_rect.center = layer_button_rect.center
            native_surface.blit(
                layer_button_text_surface,
                layer_button_text_rect
            )

    def render_menu_buttons(self, native_surface):
        old_item_right_side = 0
        for menu_button_data_index, menu_button_data in enumerate(self.menu_buttons_data_list):
            menu_button_rect = menu_button_data["rect"]
            if self.current_menu_item_index == menu_button_data_index:
                menu_button_region = menu_button_data["frames_list"][self.current_menu_item_frames]
            else:
                menu_button_region = menu_button_data["frames_list"][0]
            menu_button_rect.left = old_item_right_side
            old_item_right_side += menu_button_region.width
            menu_button_rect.left -= self.menu_position_x_offset
            native_surface.blit(
                self.sprite_sheet_surface,
                (menu_button_rect.left, menu_button_rect.top),
                menu_button_region,
            )
            if menu_button_data_index == self.current_menu_item_index:
                pygame.draw.rect(
                    native_surface,
                    "green",
                    menu_button_rect,
                    1
                )

            if is_debug:
                pygame.draw.rect(
                    native_surface,
                    "red",
                    menu_button_rect,
                    1
                )
