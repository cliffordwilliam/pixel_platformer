import pygame
import sys
from os import path
import json


pygame.init()


def wrap_range(input, left_limit, right_limit):
    return (input - left_limit) % (right_limit - left_limit + 1) + left_limit


class Game():
    def __init__(self):
        self.cg_pixel_3x5_font_path = path.join('fonts', 'cg-pixel-3x5.ttf')
        self.cg_pixel_3x5_font_height = 5

        self.grid_png_path = path.join('images', 'grid.png')
        self.sprite_sheet_png_path = path.join('images', 'sprite_sheet.png')
        self.sprite_sheet_data_path = path.join('data', 'sprite_sheet.json')

        self.fps = 30

        self.native_width = 432
        self.native_height = 288
        self.native_size = (self.native_width, self.native_height)

        self.resolution_scale = 3

        self.window_width = self.native_width * self.resolution_scale
        self.window_height = self.native_height * self.resolution_scale
        self.window_size = (self.window_width, self.window_height)

        self.clock = pygame.time.Clock()

        self.native_surface = pygame.Surface(self.native_size)
        self.window_surface = pygame.display.set_mode(self.window_size)

        self.font = pygame.font.Font(
            self.cg_pixel_3x5_font_path, self.cg_pixel_3x5_font_height
        )

        self.is_debug = False
        self.scene = None

    @property
    def resolution_scale(self):
        return self._resolution_scale

    @resolution_scale.setter
    def resolution_scale(self, value):
        self._resolution_scale = value

        self.window_width = self.native_width * self.resolution_scale
        self.window_height = self.native_height * self.resolution_scale
        self.window_size = (self.window_width, self.window_height)

        self.window_surface = pygame.display.set_mode(self.window_size)


game = Game()


class Sprite(pygame.sprite.Sprite):
    def __init__(self, groups, sprite_sheet_surface, position, frames_list):
        super().__init__(groups)
        # Sprite sheet image + rect
        self.image = sprite_sheet_surface
        self.rect = self.image.get_frect(topleft=position)

        # Tuples list: region blit needs tuple
        self.frames_list = frames_list
        self.frames_list_len = len(self.frames_list)
        self.frames_list_len_index = self.frames_list_len - 1
        self.frame_index = 0

        # Frame: (0, 0, 0, 0) - x y w h
        self.frame = self.frames_list[self.frame_index]
        self.frame_rect = pygame.FRect(
            self.rect.x,
            self.rect.y,
            self.frame[2],
            self.frame[3]
        )

        # Sprite position
        self.position = position

    @property
    def position(self):
        return self._position

    @position.setter
    def position(self, value):
        self._position = value
        self.rect.x = self.position.x
        self.rect.y = self.position.y
        self.frame_rect.x = self.position.x
        self.frame_rect.y = self.position.y

    @property
    def frame_index(self):
        return self._frame_index

    @frame_index.setter
    def frame_index(self, value):
        self._frame_index = value
        self.frame = self.frames_list[self._frame_index]


class Group(pygame.sprite.Group):
    def __init__(self):
        super().__init__()

    def draw(self, native_surface, camera_rect):
        for sprite in self:
            # Blit sprite sheet certain region
            native_surface.blit(
                sprite.image,
                (sprite.rect.x, sprite.rect.y),
                sprite.frame,
            )

            # # Get in_game position
            # sprite_rect_render_position = (
            #     sprite.rect.x - camera_rect.x,
            #     sprite.rect.y - camera_rect.y
            # )

            # # Render with in_game position
            # native_surface.blit(
            #     sprite.image,
            #     sprite_rect_render_position,
            #     sprite.frame,
            # )

            if game.is_debug:
                # pass
                # Draw image rect global
                pygame.draw.rect(
                    native_surface,
                    "red",
                    sprite.rect,
                    1
                )
                # Draw frame rect global
                pygame.draw.rect(
                    native_surface,
                    "green",
                    sprite.frame_rect,
                    1
                )

                # Draw frame rect in_game
                # pygame.draw.rect(
                #     native_surface,
                #     "red",
                #     pygame.Rect(
                #         sprite_rect_render_position[0],
                #         sprite_rect_render_position[1],
                #         TILE_SIZE,
                #         TILE_SIZE
                #     ),
                #     1
                # )


class LevelEditor():
    def __init__(self):
        # Sprite sheet surface
        self.sprite_sheet_surface = pygame.image.load(
            game.sprite_sheet_png_path
        ).convert_alpha()

        # Sprite sheet data: frames_list, bitmasks
        with open(game.sprite_sheet_data_path, 'r') as file:
            json_data = json.load(file)
        for sprite_name, sprite_data in json_data.items():
            frames_list = []
            # Frames_list: dict -> tuple
            for frame in sprite_data["frames_list"]:
                tuple_frame = (
                    frame["x"], frame["y"], frame["w"], frame["h"]
                )
                frames_list.append((tuple_frame))
            sprite_data["frames_list"] = frames_list
            # Bitmasks key: str -> int
            sprite_data["bitmasks"] = {
                int(key): value for key, value in sprite_data["bitmasks"].items()}
        self.sprite_sheet_data = json_data

        # Groups
        self.groups = [
            Group()
        ]
        self.group_index = 0

        # Things are drawn relative to this
        self.camera_rect = pygame.Rect(
            0,
            0,
            game.native_width,
            game.native_height
        )

        # Create a test sprite
        self.sprite = Sprite(
            # The group
            self.groups[self.group_index],

            # The sprite sheet
            self.sprite_sheet_surface,

            # The position
            pygame.math.Vector2(0, 0),

            # The frames - all of them needs to have same dimension
            [
                # Example frame
                # (
                #     x,
                #     y,
                #     w,
                #     h
                # ),

                # The whole sprite sheet
                # (
                #     0,
                #     0,
                #     512,
                #     256
                # ),

                # A grass block
                (
                    0,
                    0,
                    18,
                    18
                ),

                # A grass block
                (
                    0,
                    36,
                    18,
                    18
                ),

                # A green boi
                # (
                #     0,
                #     162,
                #     24,
                #     24
                # ),

                # Add more...
            ]
        )

    def input(self, event):
        # Key
        if event.type == pygame.KEYDOWN:
            # Right
            if event.key == pygame.K_RIGHT:
                # Cycle forward test sprite frames
                self.sprite.frame_index = wrap_range(
                    self.sprite.frame_index + 1, 0,
                    self.sprite.frames_list_len_index
                )

            # Left
            if event.key == pygame.K_LEFT:
                self.sprite.position -= (-1, 0)

            # 1
            if event.key == pygame.K_1:
                # Set game resolution to x1
                game.resolution_scale = 1

            # 2
            if event.key == pygame.K_2:
                # Set game resolution to x2
                game.resolution_scale = 2

            # 3
            if event.key == pygame.K_3:
                # Set game resolution to x3
                game.resolution_scale = 3

            # 4
            if event.key == pygame.K_4:
                # Set game resolution to x4
                game.resolution_scale = 4

            # d
            if event.key == pygame.K_d:
                # Set game resolution to x4
                game.is_debug = not game.is_debug

    def update(self, native_surface, dt):
        # Clear
        native_surface.fill("black")

        # Groups draw
        for group in self.groups:
            group.draw(native_surface, self.camera_rect)


# Set scene
game.scene = LevelEditor()

while 1:
    # Dt
    dt = game.clock.tick(game.fps) / 1000

    # Get events
    for event in pygame.event.get():
        # Close window
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        # Scene event
        game.scene.input(event)

    # Scene update
    game.scene.update(game.native_surface, dt)

    # Resize native
    pygame.transform.scale_by(
        game.native_surface, game.resolution_scale, game.window_surface
    )

    # Update window
    pygame.display.update()

# TODO: Setters are overheads, maybe dont use them later