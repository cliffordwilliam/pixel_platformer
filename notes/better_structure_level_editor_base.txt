import pygame
import sys
from os import path
import json


pygame.init()


# Contains game data
class Game():
    def __init__(self):
        # Fonts paths + height
        self.cg_pixel_3x5_font_path = path.join('fonts', 'cg-pixel-3x5.ttf')
        self.cg_pixel_3x5_font_height = 5

        # Sprite sheets paths
        self.grid_png_path = path.join('images', 'grid.png')
        self.sprite_sheet_png_path = path.join('images', 'sprite_sheet.png')
        self.sprite_sheet_data_path = path.join('data', 'sprite_sheet.json')

        # Game fps
        self.fps = 30

        # Game native size
        self.native_width = 432
        self.native_height = 288
        self.native_size = (self.native_width, self.native_height)

        # Game resolution size setting
        self.resolution_scale = 3

        # Game window size
        self.window_width = self.native_width * self.resolution_scale
        self.window_height = self.native_height * self.resolution_scale
        self.window_size = (self.window_width, self.window_height)

        # Game clock
        self.clock = pygame.time.Clock()

        # Game native and window surfaces
        self.native_surface = pygame.Surface(self.native_size)
        self.window_surface = pygame.display.set_mode(self.window_size)

        # This game uses 1 font only, otherwise instance a font in scene
        self.font = pygame.font.Font(
            self.cg_pixel_3x5_font_path, self.cg_pixel_3x5_font_height
        )

        # Game scene
        self.scene = None

        # Debug flag
        self.is_debug = False

    # Change resolution -> update window size and surface
    @property
    def resolution_scale(self):
        return self._resolution_scale

    @resolution_scale.setter
    def resolution_scale(self, value):
        self._resolution_scale = value

        self.window_width = self.native_width * self.resolution_scale
        self.window_height = self.native_height * self.resolution_scale
        self.window_size = (self.window_width, self.window_height)

        self.window_surface = pygame.display.set_mode(self.window_size)


# Instance game
game = Game()


# Surface, rect, frames, position
# TODO: animation
class Sprite(pygame.sprite.Sprite):
    def __init__(self, groups, sprite_sheet_surface, position, frames_list):
        super().__init__(groups)
        # Sprite sheet surface + rect
        self.image = sprite_sheet_surface
        self.rect = self.image.get_frect(topleft=position)

        # Sprite frames list == list of tuples: region blit needs tuple
        self.frames_list = frames_list
        self.frames_list_len = len(self.frames_list)
        self.frames_list_len_index = self.frames_list_len - 1
        self.frame_index = 0

        # Sprite frame == (0, 0, 0, 0) - x y w h + its rect
        self.frame = self.frames_list[self.frame_index]
        self.frame_rect = pygame.FRect(
            self.rect.x,
            self.rect.y,
            self.frame[2],
            self.frame[3]
        )

        # Sprite position
        self.position = position

    # Change position -> rect, frame_rect follows
    # TODO: child follow position
    @property
    def position(self):
        return self._position

    @position.setter
    def position(self, value):
        self._position = value
        self.rect.x = self.position.x
        self.rect.y = self.position.y
        self.frame_rect.x = self.position.x
        self.frame_rect.y = self.position.y

    # Change frame index -> change frame
    @property
    def frame_index(self):
        return self._frame_index

    @frame_index.setter
    def frame_index(self, value):
        if 0 <= value < self.frames_list_len:
            self._frame_index = value
            self.frame = self.frames_list[self._frame_index]


# Custom draw -> draw a small region from sprite sheet. Camera offset
class Group(pygame.sprite.Group):
    def __init__(self):
        super().__init__()

    def draw(self, native_surface, camera_rect):
        # Draw each sprite in this group
        for sprite in self:
            # Blit a region of the sprite sheet to native surface
            native_surface.blit(
                sprite.image,
                (sprite.rect.x, sprite.rect.y),
                sprite.frame,
            )

            # # Get in_game position
            # sprite_rect_render_position = (
            #     sprite.rect.x - camera_rect.x,
            #     sprite.rect.y - camera_rect.y
            # )

            # # Render with in_game position
            # native_surface.blit(
            #     sprite.image,
            #     sprite_rect_render_position,
            #     sprite.frame,
            # )

            # Debug draw
            if game.is_debug:
                # Draw image rect global
                pygame.draw.rect(
                    native_surface,
                    "red",
                    sprite.rect,
                    1
                )
                # Draw frame rect global
                pygame.draw.rect(
                    native_surface,
                    "green",
                    sprite.frame_rect,
                    1
                )

                # Draw frame rect in_game
                # pygame.draw.rect(
                #     native_surface,
                #     "red",
                #     pygame.Rect(
                #         sprite_rect_render_position[0],
                #         sprite_rect_render_position[1],
                #         TILE_SIZE,
                #         TILE_SIZE
                #     ),
                #     1
                # )


class LevelEditor():
    def __init__(self):
        # Sprite sheet surface
        self.sprite_sheet_surface = pygame.image.load(
            game.sprite_sheet_png_path
        ).convert_alpha()

        # Sprite sheet data: frames_list, bitmasks
        with open(game.sprite_sheet_data_path, 'r') as file:
            json_data = json.load(file)
        for sprite_name, sprite_data in json_data.items():
            frames_list = []
            # Frames_list: dict -> tuple
            for frame in sprite_data["frames_list"]:
                tuple_frame = (
                    frame["x"], frame["y"], frame["w"], frame["h"]
                )
                frames_list.append((tuple_frame))
            sprite_data["frames_list"] = frames_list
            # Bitmasks key: str -> int
            sprite_data["bitmasks"] = {
                int(key): value for key, value in sprite_data["bitmasks"].items()}
        self.sprite_sheet_dict = json_data
        self.sprite_name = "grass_block"
        self.sprite_frames_list = self.sprite_sheet_dict[self.sprite_name]["frames_list"]
        self.sprite_bitmasks = self.sprite_sheet_dict[self.sprite_name]["bitmasks"]

        # Groups
        self.groups_list = [
            Group()
        ]
        self.groups_list_len = len(self.groups_list)
        self.group_index = 0
        self.group = self.groups_list[self.group_index]

        # Things are drawn relative to this
        self.camera_rect = pygame.Rect(
            0,
            0,
            game.native_width,
            game.native_height
        )

        # Create a test sprite
        self.sprite = Sprite(
            # The group
            self.group,

            # The sprite sheet
            self.sprite_sheet_surface,

            # The position
            pygame.math.Vector2(0, 0),

            # The frames list
            self.sprite_frames_list
        )

    # Change sprite name -> update frames list and bitmasks
    @property
    def sprite_name(self):
        return self._sprite_name

    @sprite_name.setter
    def sprite_name(self, value):
        if value in self.sprite_sheet_dict:
            self._sprite_name = value
            self.sprite_frames_list = self.sprite_sheet_dict[self.sprite_name]["frames_list"]
            self.sprite_bitmasks = self.sprite_sheet_dict[self.sprite_name]["bitmasks"]

    # Change group index -> change group
    @property
    def group_index(self):
        return self._group_index

    @group_index.setter
    def group_index(self, value):
        if 0 <= value < self.groups_list_len:
            self._group_index = value
            self.group = self.groups_list[self._group_index]

    # Scene input
    def input(self, event):
        pass

    # Scene update
    def update(self, native_surface, dt):
        # Clear
        native_surface.fill("black")

        # Groups draw
        for group in self.groups_list:
            group.draw(native_surface, self.camera_rect)


# Set scene
game.scene = LevelEditor()

while 1:
    # Dt
    dt = game.clock.tick(game.fps) / 1000

    # Get events
    for event in pygame.event.get():
        # Close window
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        # Scene event
        game.scene.input(event)

    # Scene update
    game.scene.update(game.native_surface, dt)

    # Resize native
    pygame.transform.scale_by(
        game.native_surface, game.resolution_scale, game.window_surface
    )

    # Update window
    pygame.display.update()
